<dec f='codebrowser/include/block/blockjob_int.h' l='134' type='void * block_job_create(const char * job_id, const BlockJobDriver * driver, BlockDriverState * bs, uint64_t perm, uint64_t shared_perm, int64_t speed, int flags, BlockCompletionFunc * cb, void * opaque, Error ** errp)'/>
<use f='codebrowser/block/backup.c' l='611' u='c' c='backup_job_create'/>
<doc f='codebrowser/include/block/blockjob_int.h' l='113'>/**
 * block_job_create:
 * @job_id: The id of the newly-created job, or %NULL to have one
 * generated automatically.
 * @job_type: The class object for the newly-created job.
 * @bs: The block
 * @perm, @shared_perm: Permissions to request for @bs
 * @speed: The maximum speed, in bytes per second, or 0 for unlimited.
 * @cb: Completion function for the job.
 * @opaque: Opaque pointer value passed to @cb.
 * @errp: Error object.
 *
 * Create a new long-running block device job and return it.  The job
 * will call @cb asynchronously when the job completes.  Note that
 * @bs may have been closed at the time the @cb it is called.  If
 * this is the case, the job may be reported as either cancelled or
 * completed.
 *
 * This function is not part of the public job interface; it should be
 * called from a wrapper that is specific to the job type.
 */</doc>
<use f='codebrowser/block/commit.c' l='316' u='c' c='commit_start'/>
<use f='codebrowser/block/mirror.c' l='1191' u='c' c='mirror_start_job'/>
<use f='codebrowser/block/stream.c' l='247' u='c' c='stream_start'/>
<def f='codebrowser/blockjob.c' l='611' ll='693' type='void * block_job_create(const char * job_id, const BlockJobDriver * driver, BlockDriverState * bs, uint64_t perm, uint64_t shared_perm, int64_t speed, int flags, BlockCompletionFunc * cb, void * opaque, Error ** errp)'/>
<doc f='codebrowser/blockjob.c' l='606'>/*
 * API for block job drivers and the block layer.  These functions are
 * declared in blockjob_int.h.
 */</doc>
