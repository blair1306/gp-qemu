<dec f='codebrowser/include/crypto/ivgen.h' l='136' type='QCryptoIVGen * qcrypto_ivgen_new(QCryptoIVGenAlgorithm alg, QCryptoCipherAlgorithm cipheralg, QCryptoHashAlgorithm hash, const uint8_t * key, size_t nkey, Error ** errp)'/>
<doc f='codebrowser/include/crypto/ivgen.h' l='103'>/**
 * qcrypto_ivgen_new:
 * @alg: the initialization vector generation algorithm
 * @cipheralg: the cipher algorithm or 0
 * @hash: the hash algorithm or 0
 * @key: the encryption key or NULL
 * @nkey: the size of @key in bytes
 *
 * Create a new initialization vector generator that uses
 * the algorithm @alg. Whether the remaining parameters
 * are required or not depends on the choice of @alg
 * requested.
 *
 * - QCRYPTO_IVGEN_ALG_PLAIN
 *
 * The IVs are generated by the 32-bit truncated sector
 * number. This should never be used for block devices
 * that are larger than 2^32 sectors in size.
 * All the other parameters are unused.
 *
 * - QCRYPTO_IVGEN_ALG_PLAIN64
 *
 * The IVs are generated by the 64-bit sector number.
 * All the other parameters are unused.
 *
 * - QCRYPTO_IVGEN_ALG_ESSIV:
 *
 * The IVs are generated by encrypting the 64-bit sector
 * number with a hash of an encryption key. The @cipheralg,
 * @hash, @key and @nkey parameters are all required.
 *
 * Returns: a new IV generator, or NULL on error
 */</doc>
<use f='codebrowser/crypto/block-luks.c' l='496' u='c' c='qcrypto_block_luks_load_key'/>
<use f='codebrowser/crypto/block-luks.c' l='835' u='c' c='qcrypto_block_luks_open'/>
<use f='codebrowser/crypto/block-luks.c' l='1049' u='c' c='qcrypto_block_luks_create'/>
<use f='codebrowser/crypto/block-luks.c' l='1202' u='c' c='qcrypto_block_luks_create'/>
<use f='codebrowser/crypto/block-qcow.c' l='67' u='c' c='qcrypto_block_qcow_init'/>
<def f='codebrowser/crypto/ivgen.c' l='30' ll='64' type='QCryptoIVGen * qcrypto_ivgen_new(QCryptoIVGenAlgorithm alg, QCryptoCipherAlgorithm cipheralg, QCryptoHashAlgorithm hash, const uint8_t * key, size_t nkey, Error ** errp)'/>
