<def f='codebrowser/fpu/softfloat-macros.h' l='234' ll='264' type='void shift128RightJamming(uint64_t a0, uint64_t a1, int count, uint64_t * z0Ptr, uint64_t * z1Ptr)'/>
<use f='codebrowser/fpu/softfloat.c' l='4397' u='c' c='float64_muladd'/>
<use f='codebrowser/fpu/softfloat.c' l='4419' u='c' c='float64_muladd'/>
<use f='codebrowser/fpu/softfloat.c' l='4423' u='c' c='float64_muladd'/>
<use f='codebrowser/fpu/softfloat.c' l='4432' u='c' c='float64_muladd'/>
<use f='codebrowser/fpu/softfloat.c' l='4436' u='c' c='float64_muladd'/>
<use f='codebrowser/fpu/softfloat.c' l='4444' u='c' c='float64_muladd'/>
<use f='codebrowser/fpu/softfloat.c' l='4448' u='c' c='float64_muladd'/>
<use f='codebrowser/fpu/softfloat.c' l='5316' u='c' c='subFloatx80Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='5330' u='c' c='subFloatx80Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='6621' u='c' c='subFloat128Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='6641' u='c' c='subFloat128Sigs'/>
<doc f='codebrowser/fpu/softfloat-macros.h' l='223'>/*----------------------------------------------------------------------------
| Shifts the 128-bit value formed by concatenating `a0&apos; and `a1&apos; right by the
| number of bits given in `count&apos;.  If any nonzero bits are shifted off, they
| are ``jammed&apos;&apos; into the least significant bit of the result by setting the
| least significant bit to 1.  The value of `count&apos; can be arbitrarily large;
| in particular, if `count&apos; is greater than 128, the result will be either
| 0 or 1, depending on whether the concatenation of `a0&apos; and `a1&apos; is zero or
| nonzero.  The result is broken into two 64-bit pieces which are stored at
| the locations pointed to by `z0Ptr&apos; and `z1Ptr&apos;.
*----------------------------------------------------------------------------*/</doc>
