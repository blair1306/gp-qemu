<dec f='codebrowser/include/qom/cpu.h' l='865' type='void cpu_reset_interrupt(CPUState * cpu, int mask)'/>
<doc f='codebrowser/include/qom/cpu.h' l='858'>/**
 * cpu_reset_interrupt:
 * @cpu: The CPU to clear the interrupt on.
 * @mask: The interrupt mask to clear.
 *
 * Resets interrupts on the vCPU @cpu.
 */</doc>
<use f='codebrowser/accel/tcg/cpu-exec.c' l='410' u='c' c='cpu_handle_halt'/>
<use f='codebrowser/hw/i386/pc.c' l='197' u='c' c='pic_irq_request'/>
<use f='codebrowser/hw/intc/apic.c' l='374' u='c' c='apic_update_irq'/>
<use f='codebrowser/hw/intc/apic.c' l='488' u='c' c='apic_sipi'/>
<def f='codebrowser/qom/cpu.c' l='121' ll='132' type='void cpu_reset_interrupt(CPUState * cpu, int mask)'/>
<doc f='codebrowser/qom/cpu.c' l='119'>/* Resetting the IRQ comes from across the code base so we take the
 * BQL here if we need to.  cpu_interrupt assumes it is held.*/</doc>
<use f='codebrowser/target/i386/kvm.c' l='2495' u='c' c='kvm_get_vcpu_events'/>
<use f='codebrowser/target/i386/kvm.c' l='2505' u='c' c='kvm_get_vcpu_events'/>
