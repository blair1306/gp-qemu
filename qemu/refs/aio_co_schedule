<dec f='codebrowser/include/block/aio.h' l='503' type='void aio_co_schedule(AioContext * ctx, struct Coroutine * co)'/>
<doc f='codebrowser/include/block/aio.h' l='491'>/**
 * aio_co_schedule:
 * @ctx: the aio context
 * @co: the coroutine
 *
 * Start a coroutine on a remote AioContext.
 *
 * The coroutine must not be entered by anyone else while aio_co_schedule()
 * is active.  In addition the coroutine must have yielded unless ctx
 * is the context in which the coroutine is running (i.e. the value of
 * qemu_get_current_aio_context() from the coroutine itself).
 */</doc>
<use f='codebrowser/block/blkdebug.c' l='517' u='c' c='rule_check'/>
<use f='codebrowser/block/nbd-client.c' l='356' u='c' c='nbd_client_attach_aio_context'/>
<use f='codebrowser/nbd/server.c' l='1015' u='c' c='blk_aio_attached'/>
<use f='codebrowser/nbd/server.c' l='1018' u='c' c='blk_aio_attached'/>
<use f='codebrowser/nbd/server.c' l='1498' u='c' c='nbd_client_receive_next_request'/>
<def f='codebrowser/util/async.c' l='438' ll='444' type='void aio_co_schedule(AioContext * ctx, Coroutine * co)'/>
<use f='codebrowser/util/async.c' l='462' u='c' c='aio_co_enter'/>
