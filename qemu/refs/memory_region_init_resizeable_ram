<dec f='codebrowser/include/exec/memory.h' l='462' type='void memory_region_init_resizeable_ram(MemoryRegion * mr, struct Object * owner, const char * name, uint64_t size, uint64_t max_size, void (*)(const char *, uint64_t, void *) resized, Error ** errp)'/>
<doc f='codebrowser/include/exec/memory.h' l='443'>/**
 * memory_region_init_resizeable_ram:  Initialize memory region with resizeable
 *                                     RAM.  Accesses into the region will
 *                                     modify memory directly.  Only an initial
 *                                     portion of this RAM is actually used.
 *                                     The used size can change across reboots.
 *
 * @mr: the #MemoryRegion to be initialized.
 * @owner: the object that tracks the region&apos;s reference count
 * @name: Region name, becomes part of RAMBlock name used in migration stream
 *        must be unique within any device
 * @size: used size of the region.
 * @max_size: max size of the region.
 * @resized: callback to notify owner about used size change.
 * @errp: pointer to Error*, to store an error if it happens.
 *
 * Note that this function does not do anything to cause the data in the
 * RAM memory region to be migrated; that is the responsibility of the caller.
 */</doc>
<use f='codebrowser/hw/core/loader.c' l='873' u='c' c='rom_set_mr'/>
<def f='codebrowser/memory.c' l='1383' ll='1400' type='void memory_region_init_resizeable_ram(MemoryRegion * mr, Object * owner, const char * name, uint64_t size, uint64_t max_size, void (*)(const char *, uint64_t, void *) resized, Error ** errp)'/>
