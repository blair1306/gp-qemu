<def f='codebrowser/include/qom/cpu.h' l='140' ll='202'/>
<size>512</size>
<doc f='codebrowser/include/qom/cpu.h' l='78'>/**
 * CPUClass:
 * @class_by_name: Callback to map -cpu command line model name to an
 * instantiatable CPU type.
 * @parse_features: Callback to parse command line arguments.
 * @reset: Callback to reset the #CPUState to its initial state.
 * @reset_dump_flags: #CPUDumpFlags to use for reset logging.
 * @has_work: Callback for checking if there is work to do.
 * @do_interrupt: Callback for interrupt handling.
 * @do_unassigned_access: Callback for unassigned access handling.
 * @do_unaligned_access: Callback for unaligned access handling, if
 * the target defines #ALIGNED_ONLY.
 * @virtio_is_big_endian: Callback to return %true if a CPU which supports
 * runtime configurable endianness is currently big-endian. Non-configurable
 * CPUs can use the default implementation of this method. This method should
 * not be used by any callers other than the pre-1.0 virtio devices.
 * @memory_rw_debug: Callback for GDB memory access.
 * @dump_state: Callback for dumping state.
 * @dump_statistics: Callback for dumping statistics.
 * @get_arch_id: Callback for getting architecture-dependent CPU ID.
 * @get_paging_enabled: Callback for inquiring whether paging is enabled.
 * @get_memory_mapping: Callback for obtaining the memory mappings.
 * @set_pc: Callback for setting the Program Counter register.
 * @synchronize_from_tb: Callback for synchronizing state from a TCG
 * #TranslationBlock.
 * @handle_mmu_fault: Callback for handling an MMU fault.
 * @get_phys_page_debug: Callback for obtaining a physical address.
 * @get_phys_page_attrs_debug: Callback for obtaining a physical address and the
 *       associated memory transaction attributes to use for the access.
 *       CPUs which use memory transaction attributes should implement this
 *       instead of get_phys_page_debug.
 * @asidx_from_attrs: Callback to return the CPU AddressSpace to use for
 *       a memory access with the specified memory transaction attributes.
 * @gdb_read_register: Callback for letting GDB read a register.
 * @gdb_write_register: Callback for letting GDB write a register.
 * @debug_check_watchpoint: Callback: return true if the architectural
 *       watchpoint whose address has matched should really fire.
 * @debug_excp_handler: Callback for handling debug exceptions.
 * @write_elf64_note: Callback for writing a CPU-specific ELF note to a
 * 64-bit VM coredump.
 * @write_elf32_qemunote: Callback for writing a CPU- and QEMU-specific ELF
 * note to a 32-bit VM coredump.
 * @write_elf32_note: Callback for writing a CPU-specific ELF note to a
 * 32-bit VM coredump.
 * @write_elf32_qemunote: Callback for writing a CPU- and QEMU-specific ELF
 * note to a 32-bit VM coredump.
 * @vmsd: State description for migration.
 * @gdb_num_core_regs: Number of core registers accessible to GDB.
 * @gdb_core_xml_file: File name for core registers GDB XML description.
 * @gdb_stop_before_watchpoint: Indicates whether GDB expects the CPU to stop
 *           before the insn which triggers a watchpoint rather than after it.
 * @gdb_arch_name: Optional callback that returns the architecture name known
 * to GDB. The caller must free the returned string with g_free.
 * @cpu_exec_enter: Callback for cpu_exec preparation.
 * @cpu_exec_exit: Callback for cpu_exec cleanup.
 * @cpu_exec_interrupt: Callback for processing interrupts in cpu_exec.
 * @disas_set_info: Setup architecture specific components of disassembly info
 * @adjust_watchpoint_address: Perform a target-specific adjustment to an
 * address before attempting to match it against watchpoints.
 *
 * Represents a CPU family or model.
 */</doc>
<mbr r='CPUClass::parent_class' o='0' t='DeviceClass'/>
<mbr r='CPUClass::class_by_name' o='1536' t='ObjectClass *(*)(const char *)'/>
<mbr r='CPUClass::parse_features' o='1600' t='void (*)(const char *, char *, Error **)'/>
<mbr r='CPUClass::reset' o='1664' t='void (*)(CPUState *)'/>
<mbr r='CPUClass::reset_dump_flags' o='1728' t='int'/>
<mbr r='CPUClass::has_work' o='1792' t='_Bool (*)(CPUState *)'/>
<mbr r='CPUClass::do_interrupt' o='1856' t='void (*)(CPUState *)'/>
<mbr r='CPUClass::do_unassigned_access' o='1920' t='CPUUnassignedAccess'/>
<mbr r='CPUClass::do_unaligned_access' o='1984' t='void (*)(CPUState *, vaddr, MMUAccessType, int, uintptr_t)'/>
<mbr r='CPUClass::virtio_is_big_endian' o='2048' t='_Bool (*)(CPUState *)'/>
<mbr r='CPUClass::memory_rw_debug' o='2112' t='int (*)(CPUState *, vaddr, uint8_t *, int, _Bool)'/>
<mbr r='CPUClass::dump_state' o='2176' t='void (*)(CPUState *, FILE *, fprintf_function, int)'/>
<mbr r='CPUClass::get_crash_info' o='2240' t='GuestPanicInformation *(*)(CPUState *)'/>
<mbr r='CPUClass::dump_statistics' o='2304' t='void (*)(CPUState *, FILE *, fprintf_function, int)'/>
<mbr r='CPUClass::get_arch_id' o='2368' t='int64_t (*)(CPUState *)'/>
<mbr r='CPUClass::get_paging_enabled' o='2432' t='_Bool (*)(const CPUState *)'/>
<mbr r='CPUClass::get_memory_mapping' o='2496' t='void (*)(CPUState *, MemoryMappingList *, Error **)'/>
<mbr r='CPUClass::set_pc' o='2560' t='void (*)(CPUState *, vaddr)'/>
<mbr r='CPUClass::synchronize_from_tb' o='2624' t='void (*)(CPUState *, struct TranslationBlock *)'/>
<mbr r='CPUClass::handle_mmu_fault' o='2688' t='int (*)(CPUState *, vaddr, int, int)'/>
<mbr r='CPUClass::get_phys_page_debug' o='2752' t='hwaddr (*)(CPUState *, vaddr)'/>
<mbr r='CPUClass::get_phys_page_attrs_debug' o='2816' t='hwaddr (*)(CPUState *, vaddr, MemTxAttrs *)'/>
<mbr r='CPUClass::asidx_from_attrs' o='2880' t='int (*)(CPUState *, MemTxAttrs)'/>
<mbr r='CPUClass::gdb_read_register' o='2944' t='int (*)(CPUState *, uint8_t *, int)'/>
<mbr r='CPUClass::gdb_write_register' o='3008' t='int (*)(CPUState *, uint8_t *, int)'/>
<mbr r='CPUClass::debug_check_watchpoint' o='3072' t='_Bool (*)(CPUState *, CPUWatchpoint *)'/>
<mbr r='CPUClass::debug_excp_handler' o='3136' t='void (*)(CPUState *)'/>
<mbr r='CPUClass::write_elf64_note' o='3200' t='int (*)(WriteCoreDumpFunction, CPUState *, int, void *)'/>
<mbr r='CPUClass::write_elf64_qemunote' o='3264' t='int (*)(WriteCoreDumpFunction, CPUState *, void *)'/>
<mbr r='CPUClass::write_elf32_note' o='3328' t='int (*)(WriteCoreDumpFunction, CPUState *, int, void *)'/>
<mbr r='CPUClass::write_elf32_qemunote' o='3392' t='int (*)(WriteCoreDumpFunction, CPUState *, void *)'/>
<mbr r='CPUClass::vmsd' o='3456' t='const struct VMStateDescription *'/>
<mbr r='CPUClass::gdb_num_core_regs' o='3520' t='int'/>
<mbr r='CPUClass::gdb_core_xml_file' o='3584' t='const char *'/>
<mbr r='CPUClass::gdb_arch_name' o='3648' t='gchar *(*)(CPUState *)'/>
<mbr r='CPUClass::gdb_stop_before_watchpoint' o='3712' t='_Bool'/>
<mbr r='CPUClass::cpu_exec_enter' o='3776' t='void (*)(CPUState *)'/>
<mbr r='CPUClass::cpu_exec_exit' o='3840' t='void (*)(CPUState *)'/>
<mbr r='CPUClass::cpu_exec_interrupt' o='3904' t='_Bool (*)(CPUState *, int)'/>
<mbr r='CPUClass::disas_set_info' o='3968' t='void (*)(CPUState *, disassemble_info *)'/>
<mbr r='CPUClass::adjust_watchpoint_address' o='4032' t='vaddr (*)(CPUState *, vaddr, int)'/>
