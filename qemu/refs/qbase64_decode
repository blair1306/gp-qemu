<dec f='codebrowser/include/qemu/base64.h' l='52' type='uint8_t * qbase64_decode(const char * input, size_t in_len, size_t * out_len, Error ** errp)'/>
<use f='codebrowser/chardev/char-ringbuf.c' l='131' u='c' c='qmp_ringbuf_write'/>
<doc f='codebrowser/include/qemu/base64.h' l='27'>/**
 * qbase64_decode:
 * @input: the (possibly) base64 encoded text
 * @in_len: length of @input or -1 if NUL terminated
 * @out_len: filled with length of decoded data
 * @errp: pointer to a NULL-initialized error object
 *
 * Attempt to decode the (possibly) base64 encoded
 * text provided in @input. If the @input text may
 * contain embedded NUL characters, or may not be
 * NUL terminated, then @in_len must be set to the
 * known size of the @input buffer.
 *
 * Note that embedded NULs, or lack of a NUL terminator
 * are considered invalid base64 data and errors
 * will be reported to this effect.
 *
 * If decoding is successful, the decoded data will
 * be returned and @out_len set to indicate the
 * number of bytes in the decoded data. The caller
 * must use g_free() to free the returned data when
 * it is no longer required.
 *
 * Returns: the decoded data or NULL
 */</doc>
<use f='codebrowser/crypto/secret.c' l='98' u='c' c='qcrypto_secret_decrypt'/>
<use f='codebrowser/crypto/secret.c' l='121' u='c' c='qcrypto_secret_decrypt'/>
<use f='codebrowser/crypto/secret.c' l='175' u='c' c='qcrypto_secret_decode'/>
<use f='codebrowser/qga/commands-posix.c' l='525' u='c' c='qmp_guest_file_write'/>
<use f='codebrowser/qga/commands-posix.c' l='1964' u='c' c='qmp_guest_set_user_password'/>
<use f='codebrowser/qga/commands.c' l='407' u='c' c='qmp_guest_exec'/>
<def f='codebrowser/util/base64.c' l='28' ll='60' type='uint8_t * qbase64_decode(const char * input, size_t in_len, size_t * out_len, Error ** errp)'/>
