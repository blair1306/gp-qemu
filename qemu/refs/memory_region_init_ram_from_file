<dec f='codebrowser/include/exec/memory.h' l='488' type='void memory_region_init_ram_from_file(MemoryRegion * mr, struct Object * owner, const char * name, uint64_t size, _Bool share, const char * path, Error ** errp)'/>
<doc f='codebrowser/include/exec/memory.h' l='472'>/**
 * memory_region_init_ram_from_file:  Initialize RAM memory region with a
 *                                    mmap-ed backend.
 *
 * @mr: the #MemoryRegion to be initialized.
 * @owner: the object that tracks the region&apos;s reference count
 * @name: Region name, becomes part of RAMBlock name used in migration stream
 *        must be unique within any device
 * @size: size of the region.
 * @share: %true if memory must be mmaped with the MAP_SHARED flag
 * @path: the path in which to allocate the RAM.
 * @errp: pointer to Error*, to store an error if it happens.
 *
 * Note that this function does not do anything to cause the data in the
 * RAM memory region to be migrated; that is the responsibility of the caller.
 */</doc>
<use f='codebrowser/backends/hostmem-file.c' l='58' u='c' c='file_backend_memory_alloc'/>
<def f='codebrowser/memory.c' l='1403' ll='1417' type='void memory_region_init_ram_from_file(MemoryRegion * mr, struct Object * owner, const char * name, uint64_t size, _Bool share, const char * path, Error ** errp)'/>
<use f='codebrowser/numa.c' l='534' u='c' c='allocate_system_memory_nonnuma'/>
