<def f='codebrowser/ui/vnc-enc-zywrle.h' l='312' ll='332' type='void wavelet_level(int * data, int size, int l, int skip_pixel)'/>
<use f='codebrowser/ui/vnc-enc-zywrle.h' l='455' u='c' c='wavelet'/>
<use f='codebrowser/ui/vnc-enc-zywrle.h' l='462' u='c' c='wavelet'/>
<doc f='codebrowser/ui/vnc-enc-zywrle.h' l='291'>/*
 1D-Wavelet transform.

 In coefficients array, the famous &apos;pyramid&apos; decomposition is well used.

 1D Model:
   |L0L0L0L0|L0L0L0L0|H0H0H0H0|H0H0H0H0| : level 0
   |L1L1L1L1|H1H1H1H1|H0H0H0H0|H0H0H0H0| : level 1

 But this method needs line buffer because H/L is different position from X0/X1.
 So, I used &apos;interleave&apos; decomposition instead of it.

 1D Model:
   |L0H0L0H0|L0H0L0H0|L0H0L0H0|L0H0L0H0| : level 0
   |L1H0H1H0|L1H0H1H0|L1H0H1H0|L1H0H1H0| : level 1

 In this method, H/L and X0/X1 is always same position.
 This leads us to more speed and less memory.
 Of cause, the result of both method is quite same
 because it&apos;s only difference that coefficient position.
*/</doc>
