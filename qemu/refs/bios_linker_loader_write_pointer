<dec f='codebrowser/include/hw/acpi/bios-linker-loader.h' l='29' type='void bios_linker_loader_write_pointer(BIOSLinker * linker, const char * dest_file, uint32_t dst_patched_offset, uint8_t dst_patched_size, const char * src_file, uint32_t src_offset)'/>
<def f='codebrowser/hw/acpi/bios-linker-loader.c' l='314' ll='340' type='void bios_linker_loader_write_pointer(BIOSLinker * linker, const char * dest_file, uint32_t dst_patched_offset, uint8_t dst_patched_size, const char * src_file, uint32_t src_offset)'/>
<doc f='codebrowser/hw/acpi/bios-linker-loader.c' l='298'>/*
 * bios_linker_loader_write_pointer: ask guest to write a pointer to the
 * source file into the destination file, and write it back to QEMU via
 * fw_cfg DMA.
 *
 * @linker: linker object instance
 * @dest_file: destination file that must be written
 * @dst_patched_offset: location within destination file blob to be patched
 *                      with the pointer to @src_file, in bytes
 * @dst_patched_offset_size: size of the pointer to be patched
 *                      at @dst_patched_offset in @dest_file blob, in bytes
 * @src_file: source file who&apos;s address must be taken
 * @src_offset: location within source file blob to which
 *              @dest_file+@dst_patched_offset will point to after
 *              firmware&apos;s executed WRITE_POINTER command
 */</doc>
<use f='codebrowser/hw/acpi/vmgenid.c' l='103' u='c' c='vmgenid_build_acpi'/>
