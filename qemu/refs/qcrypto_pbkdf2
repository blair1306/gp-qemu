<dec f='codebrowser/include/crypto/pbkdf.h' l='122' type='int qcrypto_pbkdf2(QCryptoHashAlgorithm hash, const uint8_t * key, size_t nkey, const uint8_t * salt, size_t nsalt, uint64_t iterations, uint8_t * out, size_t nout, Error ** errp)'/>
<use f='codebrowser/crypto/block-luks.c' l='459' u='c' c='qcrypto_block_luks_load_key'/>
<use f='codebrowser/crypto/block-luks.c' l='546' u='c' c='qcrypto_block_luks_load_key'/>
<use f='codebrowser/crypto/block-luks.c' l='1103' u='c' c='qcrypto_block_luks_create'/>
<use f='codebrowser/crypto/block-luks.c' l='1180' u='c' c='qcrypto_block_luks_create'/>
<doc f='codebrowser/include/crypto/pbkdf.h' l='98'>/**
 * qcrypto_pbkdf2:
 * @hash: the hash algorithm to use
 * @key: the user password / key
 * @nkey: the length of @key in bytes
 * @salt: a random salt
 * @nsalt: length of @salt in bytes
 * @iterations: the number of iterations to compute
 * @out: pointer to pre-allocated buffer to hold output
 * @nout: length of @out in bytes
 * @errp: pointer to a NULL-initialized error object
 *
 * Apply the PBKDF2 algorithm to derive an encryption
 * key from a user password provided in @key. The
 * @salt parameter is used to perturb the algorithm.
 * The @iterations count determines how many times
 * the hashing process is run, which influences how
 * hard it is to crack the key. The number of @iterations
 * should be large enough such that the algorithm takes
 * 1 second or longer to derive a key. The derived key
 * will be stored in the preallocated buffer @out.
 *
 * Returns: 0 on success, -1 on error
 */</doc>
<def f='codebrowser/crypto/pbkdf-stub.c' l='30' ll='43' type='int qcrypto_pbkdf2(QCryptoHashAlgorithm hash, const uint8_t * key, size_t nkey, const uint8_t * salt, size_t nsalt, uint64_t iterations, uint8_t * out, size_t nout, Error ** errp)'/>
<use f='codebrowser/crypto/pbkdf.c' l='82' u='c' c='qcrypto_pbkdf2_count_iters'/>
