<dec f='codebrowser/include/exec/memory.h' l='760' type='void memory_region_init_rom_device(MemoryRegion * mr, struct Object * owner, const MemoryRegionOps * ops, void * opaque, const char * name, uint64_t size, Error ** errp)'/>
<doc f='codebrowser/include/exec/memory.h' l='736'>/**
 * memory_region_init_rom_device:  Initialize a ROM memory region.
 *                                 Writes are handled via callbacks.
 *
 * This function initializes a memory region backed by RAM for reads
 * and callbacks for writes, and arranges for the RAM backing to
 * be migrated (by calling vmstate_register_ram()
 * if @owner is a DeviceState, or vmstate_register_ram_global() if
 * @owner is NULL).
 *
 * TODO: Currently we restrict @owner to being either NULL (for
 * global RAM regions with no owner) or devices, so that we can
 * give the RAM block a unique name for migration purposes.
 * We should lift this restriction and allow arbitrary Objects.
 * If you pass a non-NULL non-device @owner then we will assert.
 *
 * @mr: the #MemoryRegion to be initialized.
 * @owner: the object that tracks the region&apos;s reference count
 * @ops: callbacks for write access handling (must not be NULL).
 * @name: Region name, becomes part of RAMBlock name used in migration stream
 *        must be unique within any device
 * @size: size of the region.
 * @errp: pointer to Error*, to store an error if it happens.
 */</doc>
<use f='codebrowser/hw/block/pflash_cfi01.c' l='746' u='c' c='pflash_cfi01_realize'/>
<def f='codebrowser/memory.c' l='2900' ll='2925' type='void memory_region_init_rom_device(MemoryRegion * mr, struct Object * owner, const MemoryRegionOps * ops, void * opaque, const char * name, uint64_t size, Error ** errp)'/>
