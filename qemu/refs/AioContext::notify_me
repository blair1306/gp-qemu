<dec f='codebrowser/include/block/aio.h' l='86' type='uint32_t'/>
<offset>1216</offset>
<doc f='codebrowser/include/block/aio.h' l='63'>/* Used to avoid unnecessary event_notifier_set calls in aio_notify;
     * accessed with atomic primitives.  If this field is 0, everything
     * (file descriptors, bottom halves, timers) will be re-evaluated
     * before the next blocking poll(), thus the event_notifier_set call
     * can be skipped.  If it is non-zero, you may need to wake up a
     * concurrent aio_poll or the glib main event loop, making
     * event_notifier_set necessary.
     *
     * Bit 0 is reserved for GSource usage of the AioContext, and is 1
     * between a call to aio_ctx_prepare and the next call to aio_ctx_check.
     * Bits 1-31 simply count the number of active calls to aio_poll
     * that are in the prepare or poll phase.
     *
     * The GSource and aio_poll must use a different mechanism because
     * there is no certainty that a call to GSource&apos;s prepare callback
     * (via g_main_context_prepare) is indeed followed by check and
     * dispatch.  It&apos;s not clear whether this would be a bug, but let&apos;s
     * play safe and allow it---it will just cause extra calls to
     * event_notifier_set until the next call to dispatch.
     *
     * Instead, the aio_poll calls include both the prepare and the
     * dispatch phase, hence a simple counter is enough for them.
     */</doc>
<use f='codebrowser/util/aio-posix.c' l='518' u='r' c='run_poll_handlers'/>
<use f='codebrowser/util/aio-posix.c' l='586' u='a' c='aio_poll'/>
<use f='codebrowser/util/aio-posix.c' l='627' u='a' c='aio_poll'/>
<use f='codebrowser/util/async.c' l='224' u='a' c='aio_ctx_prepare'/>
<use f='codebrowser/util/async.c' l='242' u='a' c='aio_ctx_check'/>
<use f='codebrowser/util/async.c' l='341' u='r' c='aio_notify'/>
