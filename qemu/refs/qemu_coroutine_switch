<dec f='codebrowser/include/qemu/coroutine_int.h' l='62' type='CoroutineAction qemu_coroutine_switch(Coroutine * from, Coroutine * to, CoroutineAction action)'/>
<use f='codebrowser/util/coroutine-ucontext.c' l='80' u='c' c='coroutine_trampoline'/>
<def f='codebrowser/util/coroutine-ucontext.c' l='165' ll='180' type='CoroutineAction qemu_coroutine_switch(Coroutine * from_, Coroutine * to_, CoroutineAction action)'/>
<doc f='codebrowser/util/coroutine-ucontext.c' l='157'>/* This function is marked noinline to prevent GCC from inlining it
 * into coroutine_trampoline(). If we allow it to do that then it
 * hoists the code to get the address of the TLS variable &quot;current&quot;
 * out of the while() loop. This is an invalid transformation because
 * the sigsetjmp() call may be called when running thread A but
 * return in thread B, and so we might be in a different thread
 * context each time round the loop.
 */</doc>
<use f='codebrowser/util/qemu-coroutine.c' l='125' u='c' c='qemu_aio_coroutine_enter'/>
<use f='codebrowser/util/qemu-coroutine.c' l='172' u='c' c='qemu_coroutine_yield'/>
