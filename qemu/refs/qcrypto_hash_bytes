<dec f='codebrowser/include/crypto/hash.h' l='93' type='int qcrypto_hash_bytes(QCryptoHashAlgorithm alg, const char * buf, size_t len, uint8_t ** result, size_t * resultlen, Error ** errp)'/>
<doc f='codebrowser/include/crypto/hash.h' l='75'>/**
 * qcrypto_hash_bytes:
 * @alg: the hash algorithm
 * @buf: the memory region to hash
 * @len: the length of @buf
 * @result: pointer to hold output hash
 * @resultlen: pointer to hold length of @result
 * @errp: pointer to a NULL-initialized error object
 *
 * Computes the hash across all the memory region
 * @buf of length @len. The @result pointer will be
 * filled with raw bytes representing the computed
 * hash, which will have length @resultlen. The
 * memory pointer in @result must be released
 * with a call to g_free() when no longer required.
 *
 * Returns: 0 on success, -1 on error
 */</doc>
<def f='codebrowser/crypto/hash.c' l='72' ll='82' type='int qcrypto_hash_bytes(QCryptoHashAlgorithm alg, const char * buf, size_t len, uint8_t ** result, size_t * resultlen, Error ** errp)'/>
<use f='codebrowser/crypto/ivgen-essiv.c' l='47' u='c' c='qcrypto_ivgen_essiv_init'/>
