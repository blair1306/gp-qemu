<dec f='codebrowser/include/crypto/cipher.h' l='159' type='QCryptoCipher * qcrypto_cipher_new(QCryptoCipherAlgorithm alg, QCryptoCipherMode mode, const uint8_t * key, size_t nkey, Error ** errp)'/>
<use f='codebrowser/backends/cryptodev-builtin.c' l='228' u='c' c='cryptodev_builtin_create_cipher_session'/>
<doc f='codebrowser/include/crypto/cipher.h' l='137'>/**
 * qcrypto_cipher_new:
 * @alg: the cipher algorithm
 * @mode: the cipher usage mode
 * @key: the private key bytes
 * @nkey: the length of @key
 * @errp: pointer to a NULL-initialized error object
 *
 * Creates a new cipher object for encrypting/decrypting
 * data with the algorithm @alg in the usage mode @mode.
 *
 * The @key parameter provides the bytes representing
 * the encryption/decryption key to use. The @nkey parameter
 * specifies the length of @key in bytes. Each algorithm has
 * one or more valid key lengths, and it is an error to provide
 * a key of the incorrect length.
 *
 * The returned cipher object must be released with
 * qcrypto_cipher_free() when no longer required
 *
 * Returns: a new cipher object, or NULL on error
 */</doc>
<use f='codebrowser/crypto/block-luks.c' l='487' u='c' c='qcrypto_block_luks_load_key'/>
<use f='codebrowser/crypto/block-luks.c' l='845' u='c' c='qcrypto_block_luks_open'/>
<use f='codebrowser/crypto/block-luks.c' l='1038' u='c' c='qcrypto_block_luks_create'/>
<use f='codebrowser/crypto/block-luks.c' l='1194' u='c' c='qcrypto_block_luks_create'/>
<use f='codebrowser/crypto/block-qcow.c' l='74' u='c' c='qcrypto_block_qcow_init'/>
<def f='codebrowser/crypto/cipher.c' l='160' ll='195' type='QCryptoCipher * qcrypto_cipher_new(QCryptoCipherAlgorithm alg, QCryptoCipherMode mode, const uint8_t * key, size_t nkey, Error ** errp)'/>
<use f='codebrowser/crypto/ivgen-essiv.c' l='56' u='c' c='qcrypto_ivgen_essiv_init'/>
<use f='codebrowser/crypto/secret.c' l='108' u='c' c='qcrypto_secret_decrypt'/>
<use f='codebrowser/ui/vnc.c' l='2420' u='c' c='protocol_client_auth_vnc'/>
