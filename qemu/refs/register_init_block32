<dec f='codebrowser/include/hw/register.h' l='188' type='RegisterInfoArray * register_init_block32(DeviceState * owner, const RegisterAccessInfo * rae, int num, RegisterInfo * ri, uint32_t * data, const MemoryRegionOps * ops, _Bool debug_enabled, uint64_t memory_size)'/>
<def f='codebrowser/hw/core/register.c' l='241' ll='277' type='RegisterInfoArray * register_init_block32(DeviceState * owner, const RegisterAccessInfo * rae, int num, RegisterInfo * ri, uint32_t * data, const MemoryRegionOps * ops, _Bool debug_enabled, uint64_t memory_size)'/>
<doc f='codebrowser/include/hw/register.h' l='172'>/**
 * Init a block of registers into a container MemoryRegion. A
 * number of constant register definitions are parsed to create a corresponding
 * array of RegisterInfo&apos;s.
 *
 * @owner: device owning the registers
 * @rae: Register definitions to init
 * @num: number of registers to init (length of @rae)
 * @ri: Register array to init, must already be allocated
 * @data: Array to use for register data, must already be allocated
 * @ops: Memory region ops to access registers.
 * @debug enabled: turn on/off verbose debug information
 * returns: A structure containing all of the registers and an initialized
 *          memory region (r_array-&gt;mem) the caller should add to a container.
 */</doc>
