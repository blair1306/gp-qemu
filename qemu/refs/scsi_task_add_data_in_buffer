<dec f='include/iscsi/iscsi.h' l='1123' type='int scsi_task_add_data_in_buffer(struct scsi_task * task, int len, unsigned char * buf)'/>
<use f='codebrowser/block/iscsi.c' l='1088' u='c' c='iscsi_aio_ioctl'/>
<doc f='include/iscsi/iscsi.h' l='1094'>/*
 * These functions are used when the application wants to specify its own buffers to read the data
 * from the DATA-IN PDUs into, or write the data to DATA-OUT PDUs from.
 * The main use is for SCSI READ10/12/16 WRITE10/12/16 operations to have them read/write directly from
 * the applications buffer, avoiding coying the data.
 *
 * This also supports reading into a vector of buffers by calling this function multiple times.
 * The individual buffers will be filled in the same order as they were created.
 *
 * Example READ10:
 *     task = iscsi_read10_task(    ( 2 512byte blocks into two buffers)
 *     scsi_task_add_data_in_buffer(task, first_buffer, 512
 *     scsi_task_add_data_in_buffer(task, second_buffer, 512
 *
 *
 * If you use this function you can not use task-&gt;datain in the READ callback.
 * task-&gt;datain.size will be 0 and
 * task-&gt;datain.data will be NULL
 *
 * Example WRITE10: (write 2 blocks)
 *     static struct scsi_iovec iov[2];
 *
 *     task = iscsi_write10_task(iscsi, lun, 0, NULL, 512, 512, 0, 0, 0, 0, 0, callback, private_data);
 *     iov[0].iov_base = first_buffer;
 *     iov[0].iov_len  = 512;
 *     iov[1].iov_base = second_buffer;
 *     iov[1].iov_len  = 512;
 *     scsi_task_set_iov_out(task, &amp;iov[0], 2);
 */</doc>
