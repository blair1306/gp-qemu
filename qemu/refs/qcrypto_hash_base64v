<dec f='codebrowser/include/crypto/hash.h' l='163' type='int qcrypto_hash_base64v(QCryptoHashAlgorithm alg, const struct iovec * iov, size_t niov, char ** base64, Error ** errp)'/>
<doc f='codebrowser/include/crypto/hash.h' l='146'>/**
 * qcrypto_hash_base64v:
 * @alg: the hash algorithm
 * @iov: the array of memory regions to hash
 * @niov: the length of @iov
 * @base64: pointer to hold output hash
 * @errp: pointer to a NULL-initialized error object
 *
 * Computes the hash across all the memory regions
 * present in @iov. The @base64 pointer will be
 * filled with the base64 encoding of the computed
 * hash, which will be terminated by &apos;\0&apos;. The
 * memory pointer in @base64 must be released
 * with a call to g_free() when no longer required.
 *
 * Returns: 0 on success, -1 on error
 */</doc>
<def f='codebrowser/crypto/hash.c' l='121' ll='137' type='int qcrypto_hash_base64v(QCryptoHashAlgorithm alg, const struct iovec * iov, size_t niov, char ** base64, Error ** errp)'/>
<use f='codebrowser/crypto/hash.c' l='147' u='c' c='qcrypto_hash_base64'/>
