<dec f='codebrowser/include/hw/boards.h' l='75' type='void machine_set_cpu_numa_node(MachineState * machine, const CpuInstanceProperties * props, Error ** errp)'/>
<def f='codebrowser/hw/core/machine.c' l='419' ll='488' type='void machine_set_cpu_numa_node(MachineState * machine, const CpuInstanceProperties * props, Error ** errp)'/>
<use f='codebrowser/hw/core/machine.c' l='740' u='c' c='machine_numa_finish_init'/>
<doc f='codebrowser/hw/core/machine.c' l='394'>/**
 * machine_set_cpu_numa_node:
 * @machine: machine object to modify
 * @props: specifies which cpu objects to assign to
 *         numa node specified by @props.node_id
 * @errp: if an error occurs, a pointer to an area to store the error
 *
 * Associate NUMA node specified by @props.node_id with cpu slots that
 * match socket/core/thread-ids specified by @props. It&apos;s recommended to use
 * query-hotpluggable-cpus.props values to specify affected cpu slots,
 * which would lead to exact 1:1 mapping of cpu slots to NUMA node.
 *
 * However for CLI convenience it&apos;s possible to pass in subset of properties,
 * which would affect all cpu slots that match it.
 * Ex for pc machine:
 *    -smp 4,cores=2,sockets=2 -numa node,nodeid=0 -numa node,nodeid=1 \
 *    -numa cpu,node-id=0,socket_id=0 \
 *    -numa cpu,node-id=1,socket_id=1
 * will assign all child cores of socket 0 to node 0 and
 * of socket 1 to node 1.
 *
 * On attempt of reassigning (already assigned) cpu slot to another NUMA node,
 * return error.
 * Empty subset is disallowed and function will return with error in this case.
 */</doc>
<use f='codebrowser/numa.c' l='184' u='c' c='parse_numa_node'/>
<use f='codebrowser/numa.c' l='304' u='c' c='parse_numa'/>
