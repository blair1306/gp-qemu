<dec f='codebrowser/include/block/blockjob_int.h' l='148' type='void block_job_sleep_ns(BlockJob * job, QEMUClockType type, int64_t ns)'/>
<use f='codebrowser/block/backup.c' l='349' u='c' c='yield_and_check'/>
<use f='codebrowser/block/backup.c' l='351' u='c' c='yield_and_check'/>
<doc f='codebrowser/include/block/blockjob_int.h' l='139'>/**
 * block_job_sleep_ns:
 * @job: The job that calls the function.
 * @clock: The clock to sleep on.
 * @ns: How many nanoseconds to stop for.
 *
 * Put the job to sleep (assuming that it wasn&apos;t canceled) for @ns
 * nanoseconds.  Canceling the job will interrupt the wait immediately.
 */</doc>
<use f='codebrowser/block/commit.c' l='182' u='c' c='commit_run'/>
<use f='codebrowser/block/mirror.c' l='611' u='c' c='mirror_throttle'/>
<use f='codebrowser/block/mirror.c' l='894' u='c' c='mirror_run'/>
<use f='codebrowser/block/mirror.c' l='900' u='c' c='mirror_run'/>
<use f='codebrowser/block/stream.c' l='144' u='c' c='stream_run'/>
<def f='codebrowser/blockjob.c' l='791' ll='807' type='void block_job_sleep_ns(BlockJob * job, QEMUClockType type, int64_t ns)'/>
