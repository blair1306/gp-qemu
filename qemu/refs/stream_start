<dec f='codebrowser/include/block/block_int.h' l='822' type='void stream_start(const char * job_id, BlockDriverState * bs, BlockDriverState * base, const char * backing_file_str, int64_t speed, BlockdevOnError on_error, Error ** errp)'/>
<doc f='codebrowser/include/block/block_int.h' l='802'>/**
 * stream_start:
 * @job_id: The id of the newly-created job, or %NULL to use the
 * device name of @bs.
 * @bs: Block device to operate on.
 * @base: Block device that will become the new base, or %NULL to
 * flatten the whole backing file chain onto @bs.
 * @backing_file_str: The file name that will be written to @bs as the
 * the new backing file if the job completes. Ignored if @base is %NULL.
 * @speed: The maximum speed, in bytes per second, or 0 for unlimited.
 * @on_error: The action to take upon error.
 * @errp: Error object.
 *
 * Start a streaming operation on @bs.  Clusters that are unallocated
 * in @bs, but allocated in any image between @base and @bs (both
 * exclusive) will be written to @bs.  At the end of a successful
 * streaming job, the backing file of @bs will be changed to
 * @backing_file_str in the written image and to @base in the live
 * BlockDriverState.
 */</doc>
<def f='codebrowser/block/stream.c' l='228' ll='280' type='void stream_start(const char * job_id, BlockDriverState * bs, BlockDriverState * base, const char * backing_file_str, int64_t speed, BlockdevOnError on_error, Error ** errp)'/>
<use f='codebrowser/blockdev.c' l='3042' u='c' c='qmp_block_stream'/>
