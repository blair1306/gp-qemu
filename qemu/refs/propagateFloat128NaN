<def f='codebrowser/fpu/softfloat-specialize.h' l='1256' ll='1289' type='float128 propagateFloat128NaN(float128 a, float128 b, float_status * status)'/>
<use f='codebrowser/fpu/softfloat.c' l='6356' u='c' c='float128_round_to_int'/>
<use f='codebrowser/fpu/softfloat.c' l='6499' u='c' c='addFloat128Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='6516' u='c' c='addFloat128Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='6533' u='c' c='addFloat128Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='6593' u='c' c='subFloat128Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='6611' u='c' c='subFloat128Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='6631' u='c' c='subFloat128Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='6719' u='c' c='float128_mul'/>
<use f='codebrowser/fpu/softfloat.c' l='6726' u='c' c='float128_mul'/>
<use f='codebrowser/fpu/softfloat.c' l='6782' u='c' c='float128_div'/>
<use f='codebrowser/fpu/softfloat.c' l='6786' u='c' c='float128_div'/>
<use f='codebrowser/fpu/softfloat.c' l='6794' u='c' c='float128_div'/>
<use f='codebrowser/fpu/softfloat.c' l='6869' u='c' c='float128_rem'/>
<use f='codebrowser/fpu/softfloat.c' l='6875' u='c' c='float128_rem'/>
<use f='codebrowser/fpu/softfloat.c' l='6971' u='c' c='float128_sqrt'/>
<use f='codebrowser/fpu/softfloat.c' l='7895' u='c' c='float128_scalbn'/>
<doc f='codebrowser/fpu/softfloat-specialize.h' l='1250'>/*----------------------------------------------------------------------------
| Takes two quadruple-precision floating-point values `a&apos; and `b&apos;, one of
| which is a NaN, and returns the appropriate NaN result.  If either `a&apos; or
| `b&apos; is a signaling NaN, the invalid exception is raised.
*----------------------------------------------------------------------------*/</doc>
