<dec f='codebrowser/include/exec/memory.h' l='1797' type='uint32_t address_space_ldub_cached(MemoryRegionCache * cache, hwaddr addr, MemTxAttrs attrs, MemTxResult * result)'/>
<doc f='codebrowser/include/exec/memory.h' l='1774'>/* address_space_ld*_cached: load from a cached #MemoryRegion
 * address_space_st*_cached: store into a cached #MemoryRegion
 *
 * These functions perform a load or store of the byte, word,
 * longword or quad to the specified address.  The address is
 * a physical address in the AddressSpace, but it must lie within
 * a #MemoryRegion that was mapped with address_space_cache_init.
 *
 * The _le suffixed functions treat the data as little endian;
 * _be indicates big endian; no suffix indicates &quot;same endianness
 * as guest CPU&quot;.
 *
 * The &quot;guest CPU endianness&quot; accessors are deprecated for use outside
 * target-* code; devices should be CPU-agnostic and use either the LE
 * or the BE accessors.
 *
 * @cache: previously initialized #MemoryRegionCache to be accessed
 * @addr: address within the address space
 * @val: data value, for stores
 * @attrs: memory transaction attributes
 * @result: location to write the success/failure of the transaction;
 *   if NULL, this information is discarded
 */</doc>
<def f='codebrowser/memory_ldst.inc.c' l='210' macro='1' type='uint32_t address_space_ldub_cached(MemoryRegionCache * cache, hwaddr addr, MemTxAttrs attrs, MemTxResult * result)'/>
<use f='codebrowser/memory_ldst.inc.c' l='246' macro='1' u='c'/>
