<def f='codebrowser/fpu/softfloat-macros.h' l='397' ll='407' type='void add128(uint64_t a0, uint64_t a1, uint64_t b0, uint64_t b1, uint64_t * z0Ptr, uint64_t * z1Ptr)'/>
<use f='codebrowser/fpu/softfloat-macros.h' l='553' u='c' c='mul128By64To192'/>
<use f='codebrowser/fpu/softfloat-macros.h' l='584' u='c' c='mul128To256'/>
<use f='codebrowser/fpu/softfloat-macros.h' l='586' u='c' c='mul128To256'/>
<use f='codebrowser/fpu/softfloat-macros.h' l='588' u='c' c='mul128To256'/>
<use f='codebrowser/fpu/softfloat-macros.h' l='589' u='c' c='mul128To256'/>
<use f='codebrowser/fpu/softfloat-macros.h' l='620' u='c' c='estimateDiv128To64'/>
<use f='codebrowser/fpu/softfloat.c' l='1246' u='c' c='roundAndPackFloat128'/>
<use f='codebrowser/fpu/softfloat.c' l='4154' u='c' c='float64_div'/>
<use f='codebrowser/fpu/softfloat.c' l='4430' u='c' c='float64_muladd'/>
<use f='codebrowser/fpu/softfloat.c' l='4543' u='c' c='float64_sqrt'/>
<use f='codebrowser/fpu/softfloat.c' l='5518' u='c' c='floatx80_div'/>
<use f='codebrowser/fpu/softfloat.c' l='5526' u='c' c='floatx80_div'/>
<use f='codebrowser/fpu/softfloat.c' l='5680' u='c' c='floatx80_sqrt'/>
<use f='codebrowser/fpu/softfloat.c' l='6367' u='c' c='float128_round_to_int'/>
<use f='codebrowser/fpu/softfloat.c' l='6379' u='c' c='float128_round_to_int'/>
<use f='codebrowser/fpu/softfloat.c' l='6390' u='c' c='float128_round_to_int'/>
<use f='codebrowser/fpu/softfloat.c' l='6395' u='c' c='float128_round_to_int'/>
<use f='codebrowser/fpu/softfloat.c' l='6537' u='c' c='addFloat128Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='6553' u='c' c='addFloat128Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='6747' u='c' c='float128_mul'/>
<use f='codebrowser/fpu/softfloat.c' l='6939' u='c' c='float128_rem'/>
<use f='codebrowser/fpu/softfloat.c' l='6997' u='c' c='float128_sqrt'/>
<doc f='codebrowser/fpu/softfloat-macros.h' l='390'>/*----------------------------------------------------------------------------
| Adds the 128-bit value formed by concatenating `a0&apos; and `a1&apos; to the 128-bit
| value formed by concatenating `b0&apos; and `b1&apos;.  Addition is modulo 2^128, so
| any carry out is lost.  The result is broken into two 64-bit pieces which
| are stored at the locations pointed to by `z0Ptr&apos; and `z1Ptr&apos;.
*----------------------------------------------------------------------------*/</doc>
