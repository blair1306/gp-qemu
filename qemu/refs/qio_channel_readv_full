<dec f='codebrowser/include/io/channel.h' l='222' type='ssize_t qio_channel_readv_full(QIOChannel * ioc, const struct iovec * iov, size_t niov, int ** fds, size_t * nfds, Error ** errp)'/>
<doc f='codebrowser/include/io/channel.h' l='184'>/**
 * qio_channel_readv_full:
 * @ioc: the channel object
 * @iov: the array of memory regions to read data into
 * @niov: the length of the @iov array
 * @fds: pointer to an array that will received file handles
 * @nfds: pointer filled with number of elements in @fds on return
 * @errp: pointer to a NULL-initialized error object
 *
 * Read data from the IO channel, storing it in the
 * memory regions referenced by @iov. Each element
 * in the @iov will be fully populated with data
 * before the next one is used. The @niov parameter
 * specifies the total number of elements in @iov.
 *
 * It is not required for all @iov to be filled with
 * data. If the channel is in blocking mode, at least
 * one byte of data will be read, but no more is
 * guaranteed. If the channel is non-blocking and no
 * data is available, it will return QIO_CHANNEL_ERR_BLOCK
 *
 * If the channel has passed any file descriptors,
 * the @fds array pointer will be allocated and
 * the elements filled with the received file
 * descriptors. The @nfds pointer will be updated
 * to indicate the size of the @fds array that
 * was allocated. It is the callers responsibility
 * to call close() on each file descriptor and to
 * call g_free() on the array pointer in @fds.
 *
 * It is an error to pass a non-NULL @fds parameter
 * unless qio_channel_has_feature() returns a true
 * value for the QIO_CHANNEL_FEATURE_FD_PASS constant.
 *
 * Returns: the number of bytes read, or -1 on error,
 * or QIO_CHANNEL_ERR_BLOCK if no data is available
 * and the channel is non-blocking
 */</doc>
<use f='codebrowser/chardev/char-socket.c' l='277' u='c' c='tcp_chr_recv'/>
<use f='codebrowser/chardev/char-socket.c' l='281' u='c' c='tcp_chr_recv'/>
<def f='codebrowser/io/channel.c' l='48' ll='65' type='ssize_t qio_channel_readv_full(QIOChannel * ioc, const struct iovec * iov, size_t niov, int ** fds, size_t * nfds, Error ** errp)'/>
<use f='codebrowser/io/channel.c' l='93' u='c' c='qio_channel_readv'/>
<use f='codebrowser/io/channel.c' l='112' u='c' c='qio_channel_read'/>
