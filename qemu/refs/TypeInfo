<def f='codebrowser/include/qom/object.h' l='445' ll='464'/>
<size>104</size>
<doc f='codebrowser/include/qom/object.h' l='405'>/**
 * TypeInfo:
 * @name: The name of the type.
 * @parent: The name of the parent type.
 * @instance_size: The size of the object (derivative of #Object).  If
 *   @instance_size is 0, then the size of the object will be the size of the
 *   parent object.
 * @instance_init: This function is called to initialize an object.  The parent
 *   class will have already been initialized so the type is only responsible
 *   for initializing its own members.
 * @instance_post_init: This function is called to finish initialization of
 *   an object, after all @instance_init functions were called.
 * @instance_finalize: This function is called during object destruction.  This
 *   is called before the parent @instance_finalize function has been called.
 *   An object should only free the members that are unique to its type in this
 *   function.
 * @abstract: If this field is true, then the class is considered abstract and
 *   cannot be directly instantiated.
 * @class_size: The size of the class object (derivative of #ObjectClass)
 *   for this object.  If @class_size is 0, then the size of the class will be
 *   assumed to be the size of the parent class.  This allows a type to avoid
 *   implementing an explicit class type if they are not adding additional
 *   virtual functions.
 * @class_init: This function is called after all parent class initialization
 *   has occurred to allow a class to set its default virtual method pointers.
 *   This is also the function to use to override virtual methods from a parent
 *   class.
 * @class_base_init: This function is called for all base classes after all
 *   parent class initialization has occurred, but before the class itself
 *   is initialized.  This is the function to use to undo the effects of
 *   memcpy from the parent class to the descendants.
 * @class_finalize: This function is called during class destruction and is
 *   meant to release and dynamic parameters allocated by @class_init.
 * @class_data: Data to pass to the @class_init, @class_base_init and
 *   @class_finalize functions.  This can be useful when building dynamic
 *   classes.
 * @interfaces: The list of interfaces associated with this type.  This
 *   should point to a static array that&apos;s terminated with a zero filled
 *   element.
 */</doc>
<mbr r='TypeInfo::name' o='0' t='const char *'/>
<mbr r='TypeInfo::parent' o='64' t='const char *'/>
<mbr r='TypeInfo::instance_size' o='128' t='size_t'/>
<mbr r='TypeInfo::instance_init' o='192' t='void (*)(Object *)'/>
<mbr r='TypeInfo::instance_post_init' o='256' t='void (*)(Object *)'/>
<mbr r='TypeInfo::instance_finalize' o='320' t='void (*)(Object *)'/>
<mbr r='TypeInfo::abstract' o='384' t='_Bool'/>
<mbr r='TypeInfo::class_size' o='448' t='size_t'/>
<mbr r='TypeInfo::class_init' o='512' t='void (*)(ObjectClass *, void *)'/>
<mbr r='TypeInfo::class_base_init' o='576' t='void (*)(ObjectClass *, void *)'/>
<mbr r='TypeInfo::class_finalize' o='640' t='void (*)(ObjectClass *, void *)'/>
<mbr r='TypeInfo::class_data' o='704' t='void *'/>
<mbr r='TypeInfo::interfaces' o='768' t='InterfaceInfo *'/>
