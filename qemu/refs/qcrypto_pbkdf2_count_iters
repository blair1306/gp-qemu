<dec f='codebrowser/include/crypto/pbkdf.h' l='150' type='uint64_t qcrypto_pbkdf2_count_iters(QCryptoHashAlgorithm hash, const uint8_t * key, size_t nkey, const uint8_t * salt, size_t nsalt, size_t nout, Error ** errp)'/>
<use f='codebrowser/crypto/block-luks.c' l='1063' u='c' c='qcrypto_block_luks_create'/>
<use f='codebrowser/crypto/block-luks.c' l='1144' u='c' c='qcrypto_block_luks_create'/>
<doc f='codebrowser/include/crypto/pbkdf.h' l='129'>/**
 * qcrypto_pbkdf2_count_iters:
 * @hash: the hash algorithm to use
 * @key: the user password / key
 * @nkey: the length of @key in bytes
 * @salt: a random salt
 * @nsalt: length of @salt in bytes
 * @nout: size of desired derived key
 * @errp: pointer to a NULL-initialized error object
 *
 * Time the PBKDF2 algorithm to determine how many
 * iterations are required to derive an encryption
 * key from a user password provided in @key in 1
 * second of compute time. The result of this can
 * be used as a the @iterations parameter of a later
 * call to qcrypto_pbkdf2(). The value of @nout should
 * match that value that will later be provided with
 * a call to qcrypto_pbkdf2().
 *
 * Returns: number of iterations in 1 second, -1 on error
 */</doc>
<def f='codebrowser/crypto/pbkdf.c' l='65' ll='113' type='uint64_t qcrypto_pbkdf2_count_iters(QCryptoHashAlgorithm hash, const uint8_t * key, size_t nkey, const uint8_t * salt, size_t nsalt, size_t nout, Error ** errp)'/>
