<def f='codebrowser/include/hw/boards.h' l='135' ll='183'/>
<size>280</size>
<doc f='codebrowser/include/hw/boards.h' l='103'>/**
 * MachineClass:
 * @get_hotplug_handler: this function is called during bus-less
 *    device hotplug. If defined it returns pointer to an instance
 *    of HotplugHandler object, which handles hotplug operation
 *    for a given @dev. It may return NULL if @dev doesn&apos;t require
 *    any actions to be performed by hotplug handler.
 * @cpu_index_to_instance_props:
 *    used to provide @cpu_index to socket/core/thread number mapping, allowing
 *    legacy code to perform maping from cpu_index to topology properties
 *    Returns: tuple of socket/core/thread ids given cpu_index belongs to.
 *    used to provide @cpu_index to socket number mapping, allowing
 *    a machine to group CPU threads belonging to the same socket/package
 *    Returns: socket number given cpu_index belongs to.
 * @hw_version:
 *    Value of QEMU_VERSION when the machine was added to QEMU.
 *    Set only by old machines because they need to keep
 *    compatibility on code that exposed QEMU_VERSION to guests in
 *    the past (and now use qemu_hw_version()).
 * @possible_cpu_arch_ids:
 *    Returns an array of @CPUArchId architecture-dependent CPU IDs
 *    which includes CPU IDs for present and possible to hotplug CPUs.
 *    Caller is responsible for freeing returned list.
 * @has_hotpluggable_cpus:
 *    If true, board supports CPUs creation with -device/device_add.
 * @minimum_page_bits:
 *    If non-zero, the board promises never to create a CPU with a page size
 *    smaller than this, so QEMU can use a more efficient larger page
 *    size than the target architecture&apos;s minimum. (Attempting to create
 *    such a CPU will fail.) Note that changing this is a migration
 *    compatibility break for the machine.
 */</doc>
<mbr r='MachineClass::parent_class' o='0' t='ObjectClass'/>
<mbr r='MachineClass::family' o='768' t='const char *'/>
<mbr r='MachineClass::name' o='832' t='char *'/>
<mbr r='MachineClass::alias' o='896' t='const char *'/>
<mbr r='MachineClass::desc' o='960' t='const char *'/>
<mbr r='MachineClass::init' o='1024' t='void (*)(MachineState *)'/>
<mbr r='MachineClass::reset' o='1088' t='void (*)(void)'/>
<mbr r='MachineClass::hot_add_cpu' o='1152' t='void (*)(const int64_t, Error **)'/>
<mbr r='MachineClass::kvm_type' o='1216' t='int (*)(const char *)'/>
<mbr r='MachineClass::block_default_type' o='1280' t='BlockInterfaceType'/>
<mbr r='MachineClass::units_per_default_bus' o='1312' t='int'/>
<mbr r='MachineClass::max_cpus' o='1344' t='int'/>
<mbr r='MachineClass::no_serial' o='1376' t='unsigned int'/>
<mbr r='MachineClass::no_parallel' o='1377' t='unsigned int'/>
<mbr r='MachineClass::use_virtcon' o='1378' t='unsigned int'/>
<mbr r='MachineClass::use_sclp' o='1379' t='unsigned int'/>
<mbr r='MachineClass::no_floppy' o='1380' t='unsigned int'/>
<mbr r='MachineClass::no_cdrom' o='1381' t='unsigned int'/>
<mbr r='MachineClass::no_sdcard' o='1382' t='unsigned int'/>
<mbr r='MachineClass::has_dynamic_sysbus' o='1383' t='unsigned int'/>
<mbr r='MachineClass::pci_allow_0_address' o='1384' t='unsigned int'/>
<mbr r='MachineClass::legacy_fw_cfg_order' o='1385' t='unsigned int'/>
<mbr r='MachineClass::is_default' o='1408' t='int'/>
<mbr r='MachineClass::default_machine_opts' o='1472' t='const char *'/>
<mbr r='MachineClass::default_boot_order' o='1536' t='const char *'/>
<mbr r='MachineClass::default_display' o='1600' t='const char *'/>
<mbr r='MachineClass::compat_props' o='1664' t='GArray *'/>
<mbr r='MachineClass::hw_version' o='1728' t='const char *'/>
<mbr r='MachineClass::default_ram_size' o='1792' t='ram_addr_t'/>
<mbr r='MachineClass::option_rom_has_mr' o='1856' t='_Bool'/>
<mbr r='MachineClass::rom_file_has_mr' o='1864' t='_Bool'/>
<mbr r='MachineClass::minimum_page_bits' o='1888' t='int'/>
<mbr r='MachineClass::has_hotpluggable_cpus' o='1920' t='_Bool'/>
<mbr r='MachineClass::numa_mem_align_shift' o='1952' t='int'/>
<mbr r='MachineClass::numa_auto_assign_ram' o='1984' t='void (*)(MachineClass *, NodeInfo *, int, ram_addr_t)'/>
<mbr r='MachineClass::get_hotplug_handler' o='2048' t='HotplugHandler *(*)(MachineState *, DeviceState *)'/>
<mbr r='MachineClass::cpu_index_to_instance_props' o='2112' t='CpuInstanceProperties (*)(MachineState *, unsigned int)'/>
<mbr r='MachineClass::possible_cpu_arch_ids' o='2176' t='const CPUArchIdList *(*)(MachineState *)'/>
