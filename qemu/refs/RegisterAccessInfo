<def f='codebrowser/include/hw/register.h' l='44' ll='59'/>
<size>88</size>
<doc f='codebrowser/include/hw/register.h' l='22'>/**
 * Access description for a register that is part of guest accessible device
 * state.
 *
 * @name: String name of the register
 * @ro: whether or not the bit is read-only
 * @w1c: bits with the common write 1 to clear semantic.
 * @reset: reset value.
 * @cor: Bits that are clear on read
 * @rsvd: Bits that are reserved and should not be changed
 *
 * @pre_write: Pre write callback. Passed the value that&apos;s to be written,
 * immediately before the actual write. The returned value is what is written,
 * giving the handler a chance to modify the written value.
 * @post_write: Post write callback. Passed the written value. Most write side
 * effects should be implemented here.
 *
 * @post_read: Post read callback. Passes the value that is about to be returned
 * for a read. The return value from this function is what is ultimately read,
 * allowing this function to modify the value before return to the client.
 */</doc>
<mbr r='RegisterAccessInfo::name' o='0' t='const char *'/>
<mbr r='RegisterAccessInfo::ro' o='64' t='uint64_t'/>
<mbr r='RegisterAccessInfo::w1c' o='128' t='uint64_t'/>
<mbr r='RegisterAccessInfo::reset' o='192' t='uint64_t'/>
<mbr r='RegisterAccessInfo::cor' o='256' t='uint64_t'/>
<mbr r='RegisterAccessInfo::rsvd' o='320' t='uint64_t'/>
<mbr r='RegisterAccessInfo::unimp' o='384' t='uint64_t'/>
<mbr r='RegisterAccessInfo::pre_write' o='448' t='uint64_t (*)(RegisterInfo *, uint64_t)'/>
<mbr r='RegisterAccessInfo::post_write' o='512' t='void (*)(RegisterInfo *, uint64_t)'/>
<mbr r='RegisterAccessInfo::post_read' o='576' t='uint64_t (*)(RegisterInfo *, uint64_t)'/>
<mbr r='RegisterAccessInfo::addr' o='640' t='hwaddr'/>
