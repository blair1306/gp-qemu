<def f='codebrowser/include/fpu/softfloat.h' l='689' ll='692' type='_Bool floatx80_invalid_encoding(floatx80 a)'/>
<doc f='codebrowser/include/fpu/softfloat.h' l='679'>/*----------------------------------------------------------------------------
| Return whether the given value is an invalid floatx80 encoding.
| Invalid floatx80 encodings arise when the integer bit is not set, but
| the exponent is not zero. The only times the integer bit is permitted to
| be zero is in subnormal numbers and the value zero.
| This includes what the Intel software developer&apos;s manual calls pseudo-NaNs,
| pseudo-infinities and un-normal numbers. It does not include
| pseudo-denormals, which must still be correctly handled as inputs even
| if they are never generated as outputs.
*----------------------------------------------------------------------------*/</doc>
<use f='codebrowser/fpu/softfloat.c' l='4836' u='c' c='floatx80_to_int32'/>
<use f='codebrowser/fpu/softfloat.c' l='4868' u='c' c='floatx80_to_int32_round_to_zero'/>
<use f='codebrowser/fpu/softfloat.c' l='4918' u='c' c='floatx80_to_int64'/>
<use f='codebrowser/fpu/softfloat.c' l='4963' u='c' c='floatx80_to_int64_round_to_zero'/>
<use f='codebrowser/fpu/softfloat.c' l='5009' u='c' c='floatx80_to_float32'/>
<use f='codebrowser/fpu/softfloat.c' l='5041' u='c' c='floatx80_to_float64'/>
<use f='codebrowser/fpu/softfloat.c' l='5073' u='c' c='floatx80_to_float128'/>
<use f='codebrowser/fpu/softfloat.c' l='5118' u='c' c='floatx80_round_to_int'/>
<use f='codebrowser/fpu/softfloat.c' l='5349' u='c' c='floatx80_add'/>
<use f='codebrowser/fpu/softfloat.c' l='5349' u='c' c='floatx80_add'/>
<use f='codebrowser/fpu/softfloat.c' l='5374' u='c' c='floatx80_sub'/>
<use f='codebrowser/fpu/softfloat.c' l='5374' u='c' c='floatx80_sub'/>
<use f='codebrowser/fpu/softfloat.c' l='5401' u='c' c='floatx80_mul'/>
<use f='codebrowser/fpu/softfloat.c' l='5401' u='c' c='floatx80_mul'/>
<use f='codebrowser/fpu/softfloat.c' l='5462' u='c' c='floatx80_div'/>
<use f='codebrowser/fpu/softfloat.c' l='5462' u='c' c='floatx80_div'/>
<use f='codebrowser/fpu/softfloat.c' l='5547' u='c' c='floatx80_rem'/>
<use f='codebrowser/fpu/softfloat.c' l='5547' u='c' c='floatx80_rem'/>
<use f='codebrowser/fpu/softfloat.c' l='5646' u='c' c='floatx80_sqrt'/>
<use f='codebrowser/fpu/softfloat.c' l='5714' u='c' c='floatx80_eq'/>
<use f='codebrowser/fpu/softfloat.c' l='5714' u='c' c='floatx80_eq'/>
<use f='codebrowser/fpu/softfloat.c' l='5744' u='c' c='floatx80_le'/>
<use f='codebrowser/fpu/softfloat.c' l='5744' u='c' c='floatx80_le'/>
<use f='codebrowser/fpu/softfloat.c' l='5778' u='c' c='floatx80_lt'/>
<use f='codebrowser/fpu/softfloat.c' l='5778' u='c' c='floatx80_lt'/>
<use f='codebrowser/fpu/softfloat.c' l='5809' u='c' c='floatx80_unordered'/>
<use f='codebrowser/fpu/softfloat.c' l='5809' u='c' c='floatx80_unordered'/>
<use f='codebrowser/fpu/softfloat.c' l='5831' u='c' c='floatx80_eq_quiet'/>
<use f='codebrowser/fpu/softfloat.c' l='5831' u='c' c='floatx80_eq_quiet'/>
<use f='codebrowser/fpu/softfloat.c' l='5866' u='c' c='floatx80_le_quiet'/>
<use f='codebrowser/fpu/softfloat.c' l='5866' u='c' c='floatx80_le_quiet'/>
<use f='codebrowser/fpu/softfloat.c' l='5906' u='c' c='floatx80_lt_quiet'/>
<use f='codebrowser/fpu/softfloat.c' l='5906' u='c' c='floatx80_lt_quiet'/>
<use f='codebrowser/fpu/softfloat.c' l='5943' u='c' c='floatx80_unordered_quiet'/>
<use f='codebrowser/fpu/softfloat.c' l='5943' u='c' c='floatx80_unordered_quiet'/>
<use f='codebrowser/fpu/softfloat.c' l='7575' u='c' c='floatx80_compare_internal'/>
<use f='codebrowser/fpu/softfloat.c' l='7575' u='c' c='floatx80_compare_internal'/>
<use f='codebrowser/fpu/softfloat.c' l='7850' u='c' c='floatx80_scalbn'/>
