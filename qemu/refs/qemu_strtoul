<dec f='codebrowser/include/qemu/cutils.h' l='131' type='int qemu_strtoul(const char * nptr, const char ** endptr, int base, unsigned long * result)'/>
<use f='codebrowser/block/sheepdog.c' l='991' u='c' c='sd_parse_snapid'/>
<use f='codebrowser/block/sheepdog.c' l='2729' u='c' c='sd_snapshot_delete'/>
<use f='codebrowser/gdbstub.c' l='915' u='c' c='gdb_handle_vcont'/>
<use f='codebrowser/gdbstub.c' l='937' u='c' c='gdb_handle_vcont'/>
<use f='codebrowser/net/net.c' l='1099' u='c' c='net_client_init'/>
<use f='codebrowser/qemu-img.c' l='3911' u='c' c='img_bench'/>
<use f='codebrowser/qemu-img.c' l='3922' u='c' c='img_bench'/>
<use f='codebrowser/qemu-img.c' l='3993' u='c' c='img_bench'/>
<use f='codebrowser/qemu-img.c' l='4004' u='c' c='img_bench'/>
<use f='codebrowser/qtest.c' l='337' u='c' c='qtest_process_command'/>
<use f='codebrowser/qtest.c' l='338' u='c' c='qtest_process_command'/>
<use f='codebrowser/qtest.c' l='357' u='c' c='qtest_process_command'/>
<use f='codebrowser/qtest.c' l='504' u='c' c='qtest_process_command'/>
<def f='codebrowser/util/cutils.c' l='365' ll='384' type='int qemu_strtoul(const char * nptr, const char ** endptr, int base, unsigned long * result)'/>
<doc f='codebrowser/util/cutils.c' l='340'>/**
 * Convert string @nptr to an unsigned long, and store it in @result.
 *
 * This is a wrapper around strtoul() that is harder to misuse.
 * Semantics of @nptr, @endptr, @base match strtoul() with differences
 * noted below.
 *
 * @nptr may be null, and no conversion is performed then.
 *
 * If no conversion is performed, store @nptr in *@endptr and return
 * -EINVAL.
 *
 * If @endptr is null, and the string isn&apos;t fully converted, return
 * -EINVAL.  This is the case when the pointer that would be stored in
 * a non-null @endptr points to a character other than &apos;\0&apos;.
 *
 * If the conversion overflows @result, store ULONG_MAX in @result,
 * and return -ERANGE.
 *
 * Else store the converted value in @result, and return zero.
 *
 * Note that a number with a leading minus sign gets converted without
 * the minus sign, checked for overflow (see above), then negated (in
 * @result&apos;s type).  This is exactly how strtoul() works.
 */</doc>
<use f='codebrowser/util/keyval.c' l='109' u='c' c='key_to_index'/>
<use f='codebrowser/util/systemd.c' l='32' u='c' c='check_socket_activation'/>
<use f='codebrowser/util/systemd.c' l='44' u='c' c='check_socket_activation'/>
<use f='codebrowser/vl.c' l='3940' u='c' c='main'/>
