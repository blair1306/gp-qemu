<def f='codebrowser/fpu/softfloat-macros.h' l='162' ll='189' type='void shift64ExtraRightJamming(uint64_t a0, uint64_t a1, int count, uint64_t * z0Ptr, uint64_t * z1Ptr)'/>
<use f='codebrowser/fpu/softfloat.c' l='925' u='c' c='roundAndPackFloatx80'/>
<use f='codebrowser/fpu/softfloat.c' l='1713' u='c' c='float32_to_int64'/>
<use f='codebrowser/fpu/softfloat.c' l='1761' u='c' c='float32_to_uint64'/>
<use f='codebrowser/fpu/softfloat.c' l='3263' u='c' c='float64_to_int64'/>
<use f='codebrowser/fpu/softfloat.c' l='4940' u='c' c='floatx80_to_int64'/>
<use f='codebrowser/fpu/softfloat.c' l='5230' u='c' c='addFloatx80Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='5241' u='c' c='addFloatx80Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='5263' u='c' c='addFloatx80Sigs'/>
<use f='codebrowser/fpu/softfloat.c' l='6077' u='c' c='float128_to_int64'/>
<use f='codebrowser/fpu/softfloat.c' l='6188' u='c' c='float128_to_uint64'/>
<use f='codebrowser/fpu/softfloat.c' l='7502' u='c' c='float64_to_uint64'/>
<doc f='codebrowser/fpu/softfloat-macros.h' l='145'>/*----------------------------------------------------------------------------
| Shifts the 128-bit value formed by concatenating `a0&apos; and `a1&apos; right by 64
| _plus_ the number of bits given in `count&apos;.  The shifted result is at most
| 64 nonzero bits; this is stored at the location pointed to by `z0Ptr&apos;.  The
| bits shifted off form a second 64-bit result as follows:  The _last_ bit
| shifted off is the most-significant bit of the extra result, and the other
| 63 bits of the extra result are all zero if and only if _all_but_the_last_
| bits shifted off were all zero.  This extra result is stored in the location
| pointed to by `z1Ptr&apos;.  The value of `count&apos; can be arbitrarily large.
|     (This routine makes more sense if `a0&apos; and `a1&apos; are considered to form a
| fixed-point value with binary point between `a0&apos; and `a1&apos;.  This fixed-point
| value is shifted right by the number of bits given in `count&apos;, and the
| integer part of the result is returned at the location pointed to by
| `z0Ptr&apos;.  The fractional part of the result may be slightly corrupted as
| described above, and is returned at the location pointed to by `z1Ptr&apos;.)
*----------------------------------------------------------------------------*/</doc>
