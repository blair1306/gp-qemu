<dec f='codebrowser/include/block/aio.h' l='222' type='void aio_notify(AioContext * ctx)'/>
<use f='codebrowser/include/block/aio.h' l='463' u='c' c='aio_enable_external'/>
<doc f='codebrowser/include/block/aio.h' l='209'>/**
 * aio_notify: Force processing of pending events.
 *
 * Similar to signaling a condition variable, aio_notify forces
 * aio_poll to exit, so that the next call will re-examine pending events.
 * The caller of aio_notify will usually call aio_poll again very soon,
 * or go through another iteration of the GLib main loop.  Hence, aio_notify
 * also has the side effect of recalculating the sets of file descriptors
 * that the main loop waits for.
 *
 * Calling aio_notify is rarely necessary, because for example scheduling
 * a bottom half calls it already.
 */</doc>
<use f='codebrowser/iothread.c' l='75' u='c' c='iothread_stop'/>
<use f='codebrowser/util/aio-posix.c' l='272' u='c' c='aio_set_fd_handler'/>
<use f='codebrowser/util/aio-posix.c' l='727' u='c' c='aio_context_set_poll_params'/>
<use f='codebrowser/util/async.c' l='67' u='c' c='aio_bh_schedule_oneshot'/>
<use f='codebrowser/util/async.c' l='168' u='c' c='qemu_bh_schedule'/>
<def f='codebrowser/util/async.c' l='335' ll='345' type='void aio_notify(AioContext * ctx)'/>
<use f='codebrowser/util/async.c' l='356' u='c' c='aio_timerlist_notify'/>
