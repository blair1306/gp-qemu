<dec f='codebrowser/block/qed.h' l='219' type='int qed_find_cluster(BDRVQEDState * s, QEDRequest * request, uint64_t pos, size_t * len, uint64_t * img_offset)'/>
<doc f='codebrowser/block/qed.h' l='216'>/**
 * Cluster functions
 */</doc>
<def f='codebrowser/block/qed-cluster.c' l='91' ll='142' type='int qed_find_cluster(BDRVQEDState * s, QEDRequest * request, uint64_t pos, size_t * len, uint64_t * img_offset)'/>
<doc f='codebrowser/block/qed-cluster.c' l='64'>/**
 * Find the offset of a data cluster
 *
 * @s:          QED state
 * @request:    L2 cache entry
 * @pos:        Byte position in device
 * @len:        Number of bytes (may be shortened on return)
 * @img_offset: Contains offset in the image file on success
 *
 * This function translates a position in the block device to an offset in the
 * image file. The translated offset or unallocated range in the image file is
 * reported back in *img_offset and *len.
 *
 * If the L2 table exists, request-&gt;l2_table points to the L2 table cache entry
 * and the caller must free the reference when they are finished.  The cache
 * entry is exposed in this way to avoid callers having to read the L2 table
 * again later during request processing.  If request-&gt;l2_table is non-NULL it
 * will be unreferenced before taking on the new cache entry.
 *
 * On success QED_CLUSTER_FOUND is returned and img_offset/len are a contiguous
 * range in the image file.
 *
 * On failure QED_CLUSTER_L2 or QED_CLUSTER_L1 is returned for missing L2 or L1
 * table offset, respectively. len is number of contiguous unallocated bytes.
 *
 * Called with table_lock held.
 */</doc>
<use f='codebrowser/block/qed.c' l='749' u='c' c='bdrv_qed_co_get_block_status'/>
<use f='codebrowser/block/qed.c' l='1311' u='c' c='qed_aio_next_io'/>
