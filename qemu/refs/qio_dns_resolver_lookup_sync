<dec f='codebrowser/include/io/dns-resolver.h' l='179' type='int qio_dns_resolver_lookup_sync(QIODNSResolver * resolver, SocketAddress * addr, size_t * naddrs, SocketAddress *** addrs, Error ** errp)'/>
<def f='codebrowser/io/dns-resolver.c' l='146' ll='172' type='int qio_dns_resolver_lookup_sync(QIODNSResolver * resolver, SocketAddress * addr, size_t * naddrs, SocketAddress *** addrs, Error ** errp)'/>
<use f='codebrowser/io/dns-resolver.c' l='204' u='c' c='qio_dns_resolver_lookup_worker'/>
<doc f='codebrowser/include/io/dns-resolver.h' l='157'>/**
 * qio_dns_resolver_lookup_sync:
 * @resolver: the DNS resolver instance
 * @addr: the address to resolve
 * @naddr: pointer to hold number of resolved addresses
 * @addrs: pointer to hold resolved addresses
 * @errp: pointer to NULL initialized error object
 *
 * This will attempt to resolve the address provided
 * in @addr. If resolution succeeds, @addrs will be filled
 * with all the resolved addresses. @naddrs will specify
 * the number of entries allocated in @addrs. The caller
 * is responsible for freeing each entry in @addrs, as
 * well as @addrs itself. @naddrs is guaranteed to be
 * greater than zero on success.
 *
 * DNS resolution will be done synchronously so execution
 * of the caller may be blocked for an arbitrary length
 * of time.
 *
 * Returns: 0 if resolution was successful, -1 on error
 */</doc>
<use f='codebrowser/ui/vnc.c' l='3676' u='c' c='vnc_display_listen_addr'/>
