<dec f='codebrowser/include/crypto/hash.h' l='68' type='int qcrypto_hash_bytesv(QCryptoHashAlgorithm alg, const struct iovec * iov, size_t niov, uint8_t ** result, size_t * resultlen, Error ** errp)'/>
<doc f='codebrowser/include/crypto/hash.h' l='50'>/**
 * qcrypto_hash_bytesv:
 * @alg: the hash algorithm
 * @iov: the array of memory regions to hash
 * @niov: the length of @iov
 * @result: pointer to hold output hash
 * @resultlen: pointer to hold length of @result
 * @errp: pointer to a NULL-initialized error object
 *
 * Computes the hash across all the memory regions
 * present in @iov. The @result pointer will be
 * filled with raw bytes representing the computed
 * hash, which will have length @resultlen. The
 * memory pointer in @result must be released
 * with a call to g_free() when no longer required.
 *
 * Returns: 0 on success, -1 on error
 */</doc>
<use f='codebrowser/block/quorum.c' l='384' u='c' c='quorum_compute_hash'/>
<use f='codebrowser/crypto/afsplit.c' l='72' u='c' c='qcrypto_afsplit_hash'/>
<def f='codebrowser/crypto/hash.c' l='42' ll='69' type='int qcrypto_hash_bytesv(QCryptoHashAlgorithm alg, const struct iovec * iov, size_t niov, uint8_t ** result, size_t * resultlen, Error ** errp)'/>
<use f='codebrowser/crypto/hash.c' l='81' u='c' c='qcrypto_hash_bytes'/>
<use f='codebrowser/crypto/hash.c' l='96' u='c' c='qcrypto_hash_digestv'/>
<use f='codebrowser/crypto/hash.c' l='130' u='c' c='qcrypto_hash_base64v'/>
