<dec f='codebrowser/block/qed.h' l='199' type='void qed_commit_l2_cache_entry(L2TableCache * l2_cache, CachedL2Table * l2_table)'/>
<def f='codebrowser/block/qed-l2-cache.c' l='160' ll='194' type='void qed_commit_l2_cache_entry(L2TableCache * l2_cache, CachedL2Table * l2_table)'/>
<doc f='codebrowser/block/qed-l2-cache.c' l='144'>/**
 * Commit an L2 cache entry into the cache.  This is meant to be used as part of
 * the process to satisfy a cache miss.  A caller would allocate an entry which
 * is not actually in the L2 cache and then once the entry was valid and
 * present on disk, the entry can be committed into the cache.
 *
 * Since the cache is write-through, it&apos;s important that this function is not
 * called until the entry is present on disk and the L1 has been updated to
 * point to the entry.
 *
 * N.B. This function steals a reference to the l2_table from the caller so the
 * caller must obtain a new reference by issuing a call to
 * qed_find_l2_cache_entry().
 *
 * Called with table_lock held.
 */</doc>
<use f='codebrowser/block/qed-table.c' l='177' u='c' c='qed_read_l2_table'/>
<use f='codebrowser/block/qed.c' l='953' u='c' c='qed_aio_write_l1_update'/>
