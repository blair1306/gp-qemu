<dec f='codebrowser/include/block/blockjob.h' l='275' type='int block_job_cancel_sync(BlockJob * job)'/>
<doc f='codebrowser/include/block/blockjob.h' l='263'>/**
 * block_job_cancel_sync:
 * @job: The job to be canceled.
 *
 * Synchronously cancel the job.  The completion callback is called
 * before the function returns.  The job may actually complete
 * instead of canceling itself; the circumstances under which this
 * happens depend on the kind of job that is active.
 *
 * Returns the return value from the job if the job actually completed
 * during the call, or -ECANCELED if it was canceled.
 */</doc>
<use f='codebrowser/block/replication.c' l='148' u='c' c='replication_close'/>
<use f='codebrowser/block/replication.c' l='657' u='c' c='replication_stop'/>
<use f='codebrowser/blockdev.c' l='1872' u='c' c='drive_backup_abort'/>
<use f='codebrowser/blockdev.c' l='1946' u='c' c='blockdev_backup_abort'/>
<def f='codebrowser/blockjob.c' l='524' ll='527' type='int block_job_cancel_sync(BlockJob * job)'/>
<use f='codebrowser/blockjob.c' l='537' u='c' c='block_job_cancel_sync_all'/>
