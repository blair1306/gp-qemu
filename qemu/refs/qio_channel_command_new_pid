<dec f='codebrowser/include/io/channel-command.h' l='70' type='QIOChannelCommand * qio_channel_command_new_pid(int writefd, int readfd, pid_t pid)'/>
<def f='codebrowser/io/channel-command.c' l='29' ll='44' type='QIOChannelCommand * qio_channel_command_new_pid(int writefd, int readfd, pid_t pid)'/>
<use f='codebrowser/io/channel-command.c' l='118' u='c' c='qio_channel_command_new_spawn'/>
<doc f='codebrowser/include/io/channel-command.h' l='49'>/**
 * qio_channel_command_new_pid:
 * @writefd: the FD connected to the command&apos;s stdin
 * @readfd: the FD connected to the command&apos;s stdout
 * @pid: the PID of the running child command
 * @errp: pointer to a NULL-initialized error object
 *
 * Create a channel for performing I/O with the
 * previously spawned command identified by @pid.
 * The two file descriptors provide the connection
 * to command&apos;s stdio streams, either one or which
 * may be -1 to indicate that stream is not open.
 *
 * The channel will take ownership of the process
 * @pid and will kill it when closing the channel.
 * Similarly it will take responsibility for
 * closing the file descriptors @writefd and @readfd.
 *
 * Returns: the command channel object, or NULL on error
 */</doc>
