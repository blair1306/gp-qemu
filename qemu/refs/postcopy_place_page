<dec f='codebrowser/migration/postcopy-ram.h' l='74' type='int postcopy_place_page(MigrationIncomingState * mis, void * host, void * from, size_t pagesize)'/>
<doc f='codebrowser/migration/postcopy-ram.h' l='68'>/*
 * Place a page (from) at (host) efficiently
 *    There are restrictions on how &apos;from&apos; must be mapped, in general best
 *    to use other postcopy_ routines to allocate.
 * returns 0 on success
 */</doc>
<def f='codebrowser/migration/postcopy-ram.c' l='566' ll='591' type='int postcopy_place_page(MigrationIncomingState * mis, void * host, void * from, size_t pagesize)'/>
<use f='codebrowser/migration/postcopy-ram.c' l='631' u='c' c='postcopy_place_page_zero'/>
<doc f='codebrowser/migration/postcopy-ram.c' l='562'>/*
 * Place a host page (from) at (host) atomically
 * returns 0 on success
 */</doc>
<use f='codebrowser/migration/ram.c' l='2475' u='c' c='ram_load_postcopy'/>
