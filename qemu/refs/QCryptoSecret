<def f='codebrowser/include/crypto/secret.h' l='120' ll='129'/>
<size>96</size>
<doc f='codebrowser/include/crypto/secret.h' l='33'>/**
 * QCryptoSecret:
 *
 * The QCryptoSecret object provides storage of secrets,
 * which may be user passwords, encryption keys or any
 * other kind of sensitive data that is represented as
 * a sequence of bytes.
 *
 * The sensitive data associated with the secret can
 * be provided directly via the &apos;data&apos; property, or
 * indirectly via the &apos;file&apos; property. In the latter
 * case there is support for file descriptor passing
 * via the usual /dev/fdset/NN syntax that QEMU uses.
 *
 * The data for a secret can be provided in two formats,
 * either as a UTF-8 string (the default), or as base64
 * encoded 8-bit binary data. The latter is appropriate
 * for raw encryption keys, while the former is appropriate
 * for user entered passwords.
 *
 * The data may be optionally encrypted with AES-256-CBC,
 * and the decryption key provided by another
 * QCryptoSecret instance identified by the &apos;keyid&apos;
 * property. When passing sensitive data directly
 * via the &apos;data&apos; property it is strongly recommended
 * to use the AES encryption facility to prevent the
 * sensitive data being exposed in the process listing
 * or system log files.
 *
 * Providing data directly, insecurely (suitable for
 * ad hoc developer testing only)
 *
 *  $QEMU -object secret,id=sec0,data=letmein
 *
 * Providing data indirectly:
 *
 *  # printf &quot;letmein&quot; &gt; password.txt
 *  # $QEMU \
 *      -object secret,id=sec0,file=password.txt
 *
 * Using a master encryption key with data.
 *
 * The master key needs to be created as 32 secure
 * random bytes (optionally base64 encoded)
 *
 *  # openssl rand -base64 32 &gt; key.b64
 *  # KEY=$(base64 -d key.b64 | hexdump  -v -e &apos;/1 &quot;%02X&quot;&apos;)
 *
 * Each secret to be encrypted needs to have a random
 * initialization vector generated. These do not need
 * to be kept secret
 *
 *  # openssl rand -base64 16 &gt; iv.b64
 *  # IV=$(base64 -d iv.b64 | hexdump  -v -e &apos;/1 &quot;%02X&quot;&apos;)
 *
 * A secret to be defined can now be encrypted
 *
 *  # SECRET=$(printf &quot;letmein&quot; |
 *             openssl enc -aes-256-cbc -a -K $KEY -iv $IV)
 *
 * When launching QEMU, create a master secret pointing
 * to key.b64 and specify that to be used to decrypt
 * the user password
 *
 *  # $QEMU \
 *      -object secret,id=secmaster0,format=base64,file=key.b64 \
 *      -object secret,id=sec0,keyid=secmaster0,format=base64,\
 *          data=$SECRET,iv=$(&lt;iv.b64)
 *
 * When encrypting, the data can still be provided via an
 * external file, in which case it is possible to use either
 * raw binary data, or base64 encoded. This example uses
 * raw format
 *
 *  # printf &quot;letmein&quot; |
 *       openssl enc -aes-256-cbc -K $KEY -iv $IV -o pw.aes
 *  # $QEMU \
 *      -object secret,id=secmaster0,format=base64,file=key.b64 \
 *      -object secret,id=sec0,keyid=secmaster0,\
 *          file=pw.aes,iv=$(&lt;iv.b64)
 *
 * Note that the ciphertext can be in either raw or base64
 * format, as indicated by the &apos;format&apos; parameter, but the
 * plaintext resulting from decryption is expected to always
 * be in raw format.
 */</doc>
<mbr r='QCryptoSecret::parent_obj' o='0' t='Object'/>
<mbr r='QCryptoSecret::rawdata' o='320' t='uint8_t *'/>
<mbr r='QCryptoSecret::rawlen' o='384' t='size_t'/>
<mbr r='QCryptoSecret::format' o='448' t='QCryptoSecretFormat'/>
<mbr r='QCryptoSecret::data' o='512' t='char *'/>
<mbr r='QCryptoSecret::file' o='576' t='char *'/>
<mbr r='QCryptoSecret::keyid' o='640' t='char *'/>
<mbr r='QCryptoSecret::iv' o='704' t='char *'/>
