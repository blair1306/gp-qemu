<dec f='codebrowser/slirp/slirp.h' l='275' type='int tcp_mss(struct tcpcb * , u_int )'/>
<use f='codebrowser/slirp/tcp_input.c' l='1440' u='c' c='tcp_dooptions'/>
<def f='codebrowser/slirp/tcp_input.c' l='1577' ll='1618' type='int tcp_mss(struct tcpcb * tp, u_int offer)'/>
<doc f='codebrowser/slirp/tcp_input.c' l='1561'>/*
 * Determine a reasonable value for maxseg size.
 * If the route is known, check route for mtu.
 * If none, use an mss that can be handled on the outgoing
 * interface without forcing IP to fragment; if bigger than
 * an mbuf cluster (MCLBYTES), round down to nearest multiple of MCLBYTES
 * to utilize large mbufs.  If no route is found, route has no mtu,
 * or the destination isn&apos;t local, use a default, hopefully conservative
 * size (usually 512 or the default IP max size, but no more than the mtu
 * of the interface), as we can&apos;t discover anything about intervening
 * gateways or networks.  We also initialize the congestion/slow start
 * window to be a single segment if the destination isn&apos;t local.
 * While looking at the routing entry, we also initialize other path-dependent
 * parameters from pre-set or cached values in the routing entry.
 */</doc>
<use f='codebrowser/slirp/tcp_output.c' l='274' u='c' c='tcp_output'/>
<use f='codebrowser/slirp/tcp_subr.c' l='474' u='c' c='tcp_connect'/>
